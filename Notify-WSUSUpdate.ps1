#requires -RunAsAdministrator

<#
.SYNOPSIS
  This task will run a script to notify manual server owners weekly of updates pending that need to be approved
.DESCRIPTION
  This task will run a script to notify manual server owners weekly of updates pending that need to be approved, 
  as well as the deadlines tied to those specific updates to meet COH policy requirements.
.INPUTS
  None
.OUTPUTS
  String path to the resulting HTML report file
.Notes
  Must be Run As Administrator
  WSUS Administrator Console must be Installed or UpdateServices Module available
#>
param (

    # FQDN of the WSUS server
    [parameter(Mandatory)]
    [string]$WsusServer,

    # Path to the CSV file containing the categories/products to approve updates for
    [string]$CategoriesToReport = '$PSScriptRoot\Configs\CategoriesToReport.csv',

    # Path to the CSV file containing the classifications to approve updates for
    [string]$ClassificationsToReport = '$PSScriptRoot\Configs\ClassificationsToReport.csv',

    # WSUS Computer Groups to report on
    [string[]]$WsusGroupsToReport,

    # Days after update creation to establish the deadline for installation
    [int]$DeadlineDays = 30,
   
    # SMTP server to use to send the notification e-mails
    [string]$SmtpServer,
    
    # SMTP address to use as the Sender of the notification e-mails.
    [string]$SmtpSender,
    
    # SMTP address to email 
    [string]$SmtpRecipients,

    # Path to save the logs and reports generated by this script
    [string]$LogDir = '$PSScriptRoot',

    # Path containing the required modules for this script
    [string]$ModulesDir = '$PSScriptRoot\Modules'

)

# $PSScriptRoot is usually null inside the param block so I can't use the double-quotes up there to expand it
# Doing it this way allows comment-based help to accurately reflect the default values of these parameters
if ($LogDir -eq '$PSScriptRoot') {
    $LogDir = "$PSScriptRoot\Logs\$(Get-Date -Format 'yyyy')\$(Get-Date -Format 'MM')\$((Get-Date -Format s) -replace ':','-')"
}
else {
    $LogDir = "$LogDir\Logs\$(Get-Date -Format 'yyyy')\$(Get-Date -Format 'MM')\$((Get-Date -Format s) -replace ':','-')"
}
$null = New-Item -ItemType Directory -Path $LogDir -ErrorAction SilentlyContinue
if ($ModulesDir -eq '$PSScriptRoot\Modules') {
    $ModulesDir = "$PSScriptRoot\Modules"
}
if ($CategoriesToReport -eq '$PSScriptRoot\Configs\CategoriesToReport.csv') {
    $CategoriesToReport = "$PSScriptRoot\Configs\CategoriesToReport.csv"
}
if ($ClassificationsToReport -eq '$PSScriptRoot\Configs\ClassificationsToReport.csv') {
    $ClassificationsToReport = "$PSScriptRoot\Configs\ClassificationsToReport.csv"
}

Import-Module "$ModulesDir\BootstrapReport\BootstrapReport.psm1" -ErrorAction Stop

function Get-RequiredUpdate {
    param ($WsusServer,$Update,$TargetGroup)

    $StatesThatIndicateUpdateIsNeeded = @(
        [Microsoft.UpdateServices.Administration.UpdateInstallationState]::Downloaded,
        [Microsoft.UpdateServices.Administration.UpdateInstallationState]::Failed,
        [Microsoft.UpdateServices.Administration.UpdateInstallationState]::InstalledPendingReboot,
        [Microsoft.UpdateServices.Administration.UpdateInstallationState]::Unknown,
        [Microsoft.UpdateServices.Administration.UpdateInstallationState]::NotInstalled
    )
    ForEach ($ThisTargetGroup in $TargetGroup) {

        $Update.GetUpdateInstallationInfoPerComputerTarget($ThisTargetGroup) |
            Where-Object -FilterScript {$StatesThatIndicateUpdateIsNeeded -contains $_.UpdateInstallationState} |
                Select-Object @{L=’Computer’;E={$WsusServer.GetComputerTarget(([guid]$_.ComputerTargetId)).FulldomainName}},
                    @{L=’Update’;E={$WsusServer.GetUpdate(([guid]$_.UpdateId)) |
                        Add-Member -PassThru -MemberType NoteProperty -Name 'UpdateInstallationState' -Value $_.UpdateInstallationState}}

    }
}

# Connect to WSUS
[void][reflection.assembly]::LoadWithPartialName("Microsoft.UpdateServices.Administration")
$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer($WsusServer,$True,8531)

# Select the product categories to report on.
$CategoryNames = Import-Csv $CategoriesToReport | Sort-Object -Unique -Property Product
$AllCategories = $wsus.GetUpdateCategories()
$SelectedCategories = $AllCategories | Where-Object -FilterScript {$CategoryNames.Product -contains $_.Title}
$Categories = [Microsoft.UpdateServices.Administration.UpdateCategoryCollection]::new()
$Categories.AddRange($SelectedCategories)

# Select the update classifications to report on.
$ClassificationNames = Import-Csv $ClassificationsToReport | Sort-Object -Unique -Property Classification
$AllClassifications = $wsus.GetUpdateClassifications()
$SelectedClassifications = $AllClassifications | Where-Object -FilterScript {$ClassificationNames.Classification -contains $_.Title}
$Classifications = [Microsoft.UpdateServices.Administration.UpdateClassificationCollection]::new()
$Classifications.AddRange($SelectedClassifications)

# Select the specified WSUS computer groups.
$WSUSTargetGroups = $wsus.GetComputerTargetGroups()
if ($WsusGroupsToReport) {
    $EmailComputerTargetGroups = $WSUSTargetGroups | Where-Object -FilterScript {$WsusGroupsToReport -contains $_.Name}
}
else {
    $EmailComputerTargetGroups = $WSUSTargetGroups
}

# Find all approved updates.
$AllApprovedUpdates = $wsus.GetUpdates(
    [Microsoft.UpdateServices.Administration.ApprovedStates]::LatestRevisionApproved,
    (Get-Date 1/1/1900),
    (Get-Date),
    $Categories,
    $Classifications
)

# Find computers that need any approved updates AND are configured for manual updating, so we can notify the administrators.
$RequiredUpdates = ForEach ($ApprovedUpdate in $AllApprovedUpdates) {

    Get-RequiredUpdate -WsusServer $wsus -Update $ApprovedUpdate -TargetGroup $EmailComputerTargetGroups

}

# Group required updates by the computer that needs them.
$Computers = $RequiredUpdates |
    Group-Object -Property Computer

# Build the HTML table of computers for the report.
[string[]]$HtmlTableOfComputers = @()
$HtmlTableOfComputers += "<table>"
$HtmlTableOfComputers += "<tr>"
$HtmlTableOfComputers += "<th>Computer</td>"
$HtmlTableOfComputers += "<th>Updates</td>"
$HtmlTableOfComputers += "</tr>"
ForEach ($NotificationComputer in $Computers.Name) {
        
    $HtmlTableOfComputers += "<tr>"
    $HtmlTableOfComputers += "<td>$NotificationComputer</td>"
        
    $HtmlTableOfUpdates = ($Computers | Where-Object -FilterScript {$_.Name -eq $NotificationComputer}).Group.Update |
        Select-Object -Property Title,
            @{Label='Deadline';Expression={$_.CreationDate.AddDays($DeadlineDays) | Get-Date -Format "M/d/yyyy"}},
                @{Label='State';Expression={$_.UpdateInstallationState}},
                @{Label='Link';Expression={$_ | Select-Object -ExpandProperty AdditionalInformationUrls}} |
                ConvertTo-Html -Fragment |
                    New-BootstrapTable
    $HtmlTableOfComputers += "<td>$HtmlTableOfUpdates</td>"
    $HtmlTableOfComputers += "</tr>"
        
}
$HtmlTableOfComputers += "</table>"
$HtmlTableOfComputers = $HtmlTableOfComputers | New-BootstrapTable

# Build the complete HTML report.
$Title = 'WSUS Updates Required'
$Body = (New-HtmlHeading "Updates Required by $WsusServer" -Level 4) +
    (New-HtmlHeading "Deadline: $DeadlineDays days after update creation" -Level 5) +
        $HtmlTableOfComputers
$ReportParameters = @{
    Title = $Title
    Description = 'Please install these updates before their deadlines'
    Body = $Body
}
$Report = New-BootstrapReport @ReportParameters
$ReportFile = "$LogDir\Report.html"
$Report | Out-File $ReportFile

# Tell the user where the report was saved.
$ReportFile

# Email the report if specified.
if ($SmtpServer -and $SmtpRecipients -and $SmtpSender) {        
    Send-MailMessage -SmtpServer $SmtpServer -To $SmtpRecipients -From $SmtpSender -Subject $Title -Body $Report -BodyAsHtml
}
